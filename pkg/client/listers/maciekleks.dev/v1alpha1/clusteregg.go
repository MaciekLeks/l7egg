/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/MaciekLeks/l7egg/pkg/apis/maciekleks.dev/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterEggLister helps list ClusterEggs.
// All objects returned here must be treated as read-only.
type ClusterEggLister interface {
	// List lists all ClusterEggs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterEgg, err error)
	// ClusterEggs returns an object that can list and get ClusterEggs.
	ClusterEggs(namespace string) ClusterEggNamespaceLister
	ClusterEggListerExpansion
}

// clusterEggLister implements the ClusterEggLister interface.
type clusterEggLister struct {
	indexer cache.Indexer
}

// NewClusterEggLister returns a new ClusterEggLister.
func NewClusterEggLister(indexer cache.Indexer) ClusterEggLister {
	return &clusterEggLister{indexer: indexer}
}

// List lists all ClusterEggs in the indexer.
func (s *clusterEggLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterEgg, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterEgg))
	})
	return ret, err
}

// ClusterEggs returns an object that can list and get ClusterEggs.
func (s *clusterEggLister) ClusterEggs(namespace string) ClusterEggNamespaceLister {
	return clusterEggNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterEggNamespaceLister helps list and get ClusterEggs.
// All objects returned here must be treated as read-only.
type ClusterEggNamespaceLister interface {
	// List lists all ClusterEggs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterEgg, err error)
	// Get retrieves the ClusterEgg from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClusterEgg, error)
	ClusterEggNamespaceListerExpansion
}

// clusterEggNamespaceLister implements the ClusterEggNamespaceLister
// interface.
type clusterEggNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterEggs in the indexer for a given namespace.
func (s clusterEggNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterEgg, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterEgg))
	})
	return ret, err
}

// Get retrieves the ClusterEgg from the indexer for a given namespace and name.
func (s clusterEggNamespaceLister) Get(name string) (*v1alpha1.ClusterEgg, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clusteregg"), name)
	}
	return obj.(*v1alpha1.ClusterEgg), nil
}
